mu_target <- max(mu_hat_month)
# short sales allowed
efficient_porfolio_short <- efficient.portfolio(mu_hat_month, cov_mat_month, mu_target,shorts=TRUE)
efficient_porfolio_short
plot(efficient_porfolio_short)
# no short sales allowed
efficient_porfolio_no_short <- efficient.portfolio(mu_hat_month, cov_mat_month, mu_target,shorts=FALSE)
efficient_porfolio_no_short
plot(efficient_porfolio_no_short)
rm(list = ls())
Change dir("/Users/michaelbeven/Documents/02 R/Statistics_and_Data_Analysis_for_Financial_Engineering/")
?Change dir
getwd
getwd()
dir = "/Users/michaelbeven/Documents/02 R/Statistics_and_Data_Analysis_for_Financial_Engineering/"
setwd(dir)
getwd()
read.csv("Stock_bond.csv)", header = TRUE)
read.csv("Stock_FX_bond.csv)", header = TRUE)
read.csv("Stock_FX_Bond.csv)", header = TRUE)
getwd()
setwd("/Users/michaelbeven/Documents/02 R/Statistics_and_Data_Analysis_for_Financial_Engineering/Working_Directory/")
getwd()
read.csv("Stock_FX_Bond.csv)", header = TRUE)
getwd()
read.csv("/Users/michaelbeven/Documents/02 R/Statistics_and_Data_Analysis_for_Financial_Engineering/Stock_FX_Bond.csv")
read.csv("Stock_FX_Bond.csv")
read.csv("Stock_FX_Bond.csv", header = TRUE)
dat = read.csv("Stock_FX_Bond.csv", header = TRUE)
columns(dat)
col(dat)
colnames(dat)
names(dat)
attach(dat)
plot(GM_AC)
plot(F_AC)
n = dim(dat)[1]
n
dim(dat)
GMReturn = GM_AC[2:n]/GM_AC[1:(n-1)] - 1
FReturn = F_AC[2:n]/F_AC[1:(n-1)] - 1
par(mfrow = c(1,1))
plot(GMReturn,FReturn)
pdf("tempplot.pdf")
plot(GMReturn,FReturn)
dev.off()
# Plot returns
pdf("tempplot.pdf")
plot(GMReturn,FReturn)
dev.off()
cor(GMReturn,FReturn)
GMReturn = log(GM_AC[2:n]/GM_AC[1:(n-1)])
FLogReturn = log(F_AC[2:n]/F_AC[1:(n-1)])
GMLogReturn = log(GM_AC[2:n]/GM_AC[1:(n-1)])
GMReturn = GM_AC[2:n]/GM_AC[1:(n-1)] - 1
FReturn = F_AC[2:n]/F_AC[1:(n-1)] - 1
cor(GMLogReturn, FLogReturn)
rm(list = ls())
niter = 1e5
below = rep(0,niter)
below
rep(0,5)
set.seed(2009)
rnorm(45,mean=0.05/253,sd=0.23/sqrt(253))
1e6
log(1e6)
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
below
mean(below)
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
mean(below)
# number of iterations
niter = 100
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
}
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 100
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 10000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 100000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 1000000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# 2.5.2 Simulations
# Michael Beven
# 20150929
# Data: None
# Problem 3
# number of iterations
niter = 100000
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimu price over
# next 45 days
below[i] = as.numeric(exp(minlogP) < 950000)
}
# view probability
mean(below)
# number of iterations
niter = 1e5
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(100, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over
# next 100 days
maxlogP = max(logPrice) # maximum price over
# next 100 days
below[i] = as.numeric(exp(maxlogP) > 1100000)
}
# view probability
mean(below)
# number of iterations
niter = 1e5
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(100, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over
# next 100 days
maxlogP = max(logPrice) # maximum price over
# next 100 days
below[i] = as.numeric(exp(minlogP) < 1000000)
}
# view probability
mean(below)
# number of iterations
niter = 1e5
# set up storage
above = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(100, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over
# next 100 days
maxlogP = max(logPrice) # maximum price over
# next 100 days
above[i] = as.numeric(exp(logPrice[niter])
> 1100000)
}
# view probability
mean(above)
logPrice[niter]
dim(logPrice)
logPrice
logPrice[100]
logPrice[-1]
logPrice[,-1]
logPrice[-1]
logPrice(-1)
tail(logPrice,1)
tail(logPrice)
tail(logPrice,n=1)
# number of iterations
niter = 1e5
# set up storage
above = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(100, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over
# next 100 days
maxlogP = max(logPrice) # maximum price over
# next 100 days
above[i] = as.numeric(exp(tail(logPrice,1))
> 1100000)
}
# view probability
mean(above)
# number of iterations
niter = 1e5
# set up storage
below = rep(0,niter)
# set seed
set.seed(2009)
# run simulation on log returns based on
# normal distribution
for (i in 1:niter)
{
r = rnorm(100, mean = 0.05/253, sd =
0.23/sqrt(253)) # generate rn
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over
# next 100 days
maxlogP = max(logPrice) # maximum price over
# next 100 days
below[i] = as.numeric(exp(tail(logPrice,1))
< 1000000)
}
# view probability
mean(below)
rm(list = ls())
